<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置组件扫描 -->
    <context:component-scan base-package="com.laravelshao.learning.spring.aop.aspectj"/>

    <!--设置开启AOP切面自动代理
        aop:aspectj-autoproxy @Aspect注解才能生效
        proxy-target-class=true 设置强制使用cglib动态代理(默认有接口会使用JDK)-->
    <aop:aspectj-autoproxy/>
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->

    <!--确定要增强的目标对象-->
    <!--基于接口-->
    <bean id="customerService" class="com.laravelshao.learning.spring.aop.CustomerServiceImpl"/>
    <!--基于一般类-->
    <bean id="productService" class="com.laravelshao.learning.spring.aop.ProductService"/>
    <!--配置通知(增强方法)-->
    <bean id="myAspectAdvice" class="com.laravelshao.learning.spring.aop.aspectj.MyAspect"/>

    <!--配置切入点和切面-->
    <aop:config>
        <!--配置切面 将通知关联切入点-->
        <aop:aspect ref="myAspectAdvice">
            <!-- 配置切入点 拦截那些bean的方法 可以配置在切面外面全局共享 -->
            <aop:pointcut expression="bean(*Service)" id="myPointcut"/>
            <!--前置通知-->
            <!--<aop:before method="before1" pointcut-ref="myPointcut"/>-->
            <!--<aop:before method="before2" pointcut-ref="myPointcut"/>-->
            <aop:before method="before" pointcut-ref="myPointcut"/>
            <!--后置通知-->
            <aop:after-returning method="afterReturing" returning="returnValue" pointcut-ref="myPointcut"/>
            <!--环绕通知-->
            <aop:around method="around" pointcut-ref="myPointcut"/>
            <!--抛出通知-->
            <aop:after-throwing method="afterThrowing" throwing="ex" pointcut-ref="myPointcut"/>
            <!--最终通知-->
            <aop:after method="after" pointcut-ref="myPointcut"/>
            <!--也可以省略-->
            <!--<aop:after method="after" pointcut="bean(*Service)"/>-->
        </aop:aspect>
    </aop:config>
</beans>